#####################################################

#书本第五章实验脚本
#POWERED BY 3115005124

# 5.1 将Student表中的Sno属性定义为码。
CREATE TABLE Student
	(Sno CHAR(9) PRIMARY KEY,
	Sname CHAR(20) NOT NULL,
	Ssex CHAR(2),
	Sage SMALLINT,
	Sdept CHAR(20)
	);
	
# 5.2 将SC表中的Sno、Cno属性组定义为码。
CREATE TABLE SC
	(Sno CHAR(9) NOT NULL,
	Cno CHAR(4) NOT NULL,
	Grade SMALLINT,
	PRIMARY KEY(Sno,Cno)
	);
	
# 5.3 定义SC表中的参照完整性。
CREATE TABLE course(
	Cno CHAR(4) PRIMARY KEY,
	Cname CHAR(40) NOT NULL,
	Cpno CHAR(4),
	Ccredit SMALLINT
);

CREATE TABLE SC
	(Sno CHAR(9) NOT NULL,
	Cno CHAR(4) NOT NULL,
	Grade SMALLINT,
	PRIMARY KEY(Sno,Cno),
	FOREIGN KEY(Sno) REFERENCES Student(Sno),
	FOREIGN KEY(Cno) REFERENCES Course(Cno)
	);
	
# 5.4 显式说明参照完整性的违约处理示例。
CREATE TABLE SC
	(Sno CHAR(9) NOT NULL,
	Cno CHAR(4) NOT NULL,
	Grade SMALLINT,
	PRIMARY KEY(Sno,Cno),
	FOREIGN KEY(Sno) REFERENCES Student(Sno)
		ON DELETE CASCADE
		
		ON UPDATE CASCADE,
	FOREIGN KEY(Cno) REFERENCES Course(Cno)
		ON DELETE NO ACTION
		
		ON UPDATE CASCADE
	);
	
# 5.5 在定义SC表时，说明Sno、Cno、Grade属性不允许取空值。
CREATE TABLE SC
	(Sno CHAR(9) NOT NULL,
	Cno CHAR(4) NOT NULL,
	Grade SMALLINT NOT NULL,
	PRIMARY KEY(Sno,Cno)
	);
	
# 5.6 建立部门表DEPT，要求部门名称Dname列取值唯一，部门编号Deptno列为主码。
CREATE TABLE DEPT
	(Deptno NUMERIC(2),
	Dname CHAR(9) UNIQUE NOT NULL,
	Location CHAR(10),
	PRIMARY KEY(Deptno)
	);
	
# 5.7 Student表的Ssex只允许取“男”或“女”。
CREATE TABLE Student
	(Sno CHAR(9) PRIMARY KEY,
	Sname CHAR(8) NOT NULL,
	Ssex CHAR(2) CHECK (Ssex IN('男','女')),
	
	Sage SMALLINT,
	Sdept CHAR(20)
	);

# 5.8 SC表的Grade的值应该在0和100之间。
CREATE TABLE SC
	(Sno CHAR(9),
	Cno CHAR(4),
	Grade SMALLINT CHECK (Grade>=0 AND Grade<=100),
	PRIMARY KEY(Sno,Cno),
	FOREIGN KEY(Sno) REFERENCES Student(Sno),
	FOREIGN KEY(Cno) REFERENCES Course(Cno)
	);
	
# 5.9 当学生的性别是男时，其名字不能以Mr.s打头。
CREATE TABLE Student
	(Sno CHAR(9),
	Sname CHAR(8) NOT NULL,
	Ssex CHAR(2),	
	Sage SMALLINT,
	Sdept CHAR(20),
	PRIMARY KEY(Sno),
	CHECK(Ssex='女' OR Sname NOT LIKE 'Mr.%')
	);
	
##########################################
# 完整性约束命名子句

# 5.10 建立学生登记表Student，要求学号在90000~99999之间，姓名不能取空值，年龄小于30，性别只能是“男”或“女”。
CREATE TABLE Student
	(Sno NUMERIC(6),
	CONSTRAINT C1 CHECK(Sno BETWEEN 90000 AND 99999),
	Sname CHAR(20),
	
	Sage NUMERIC(3),
	CONSTRAINT C3 CHECK(Sage<30),
	Ssex CHAR(2),
	CONSTRAINT C4 CHECK(Ssex IN ('男','女')),
	CONSTRAINT StudentKey PRIMARY KEY(Sno)
	);
	
# 5.11 建立教室表TEACHER，要求每个教师的应发工资不低于3000元。应发工资是工资列Sal与扣除项Deduct之和。
CREATE TABLE TEACHER
	(Eno NUMERIC(4) PRIMARY KEY,
	Ename CHAR(10),
	Job CHAR(8),
	Sal NUMERIC(7,2),
	Deduct NUMERIC(7,2),
	Deptno NUMERIC(2),
	CONSTRAINT TEACHERKey FOREIGN KEY(Deptno)
	REFERENCES DEPT(Deptno),
	CONSTRAINT C1 CHECK(Sal+Deduct>=3000)
	);
	
# 5.12 去掉例5.10 Student表中对性别的限制。
ALTER TABLE Student DROP CONSTRAINT C4;

# 5.13 修改表Student中的约束条件，要求学号改为在900000~999999之间，年龄由小于30改为小于40。
ALTER TABLE Student DROP CONSTRAINT C1;
ALTER TABLE Student ADD CONSTRAINT C1 CHECK(Sno BETWEEN 900000 AND 999999);
ALTER TABLE Student DROP CONSTRAINT C3;
ALTER TABLE Student ADD CONSTRAINT C3 CHECK(Sage<40);

# 5.14 建立一个性别域，并声明性别域的取值范围。
CREATE DOMAIN GenderDomain CHAR(2) CHECK (VALUE IN ('男','女'));

# 5.15 建立一个性别域 GenderDomain，并对其中的限制命名。  
CREATE DOMAIN GenderDomain CHAR(2) 
CONSTRAINT GD CHECK(VALUE IN ('男','女'));

# 5.16 删除域 GenderDomain的限制条件GD。
ALTER DOMAIN GenderDomain
DROP CONSTRAINT GD;

# 5.17 在域 GenderDomain上增加性别的限制条件GDD。
ALTER DOMAIN GenderDomain ADD CONSTRAINT GDD CHECK(VALUE IN ('1','0'));


# 5.18 限制数据库课程最多60名学生选修。
CREATE ASSERTION ASSE_SC_DB_NUM
	CHECK(60>=(SELECT count(*)
		FROM Course,SC
		WHERE SC.CNO=COURSE.CNO AND COURSE.CNAME='数据库')
		);
		
# 5.19 限制每一门课程最多60名学生选修。
CREATE ASSERTION ASSE_SC_DB_CNUM1
	CHECK(60>=ALL(SELECT count(*)
					FROM SC
					GROUP by cno)
				);
				
# 5.20 限制每个学期每一门课程最多60名学生选修。
ALTER TABLE SC ADD TERM DATE;

CREATE ASSERTION ASSE_SC_DB_CNUM2
	CHECK(60>=ALL (select count(*) from SC group by cno, TERM));
	
	
##############################################################

# 触发器

# 5.21 当对表SC的Grade属性进行修改时，若分数增加了10%，则将此次操作记录到另一个表SC_U(Sno、Cno、Oldgrade、Newgrade)中，其中 Oldgrade是修改前的分数，Newgrade是修改后的分数。

CREATE TRIGGER SC_T
AFTER UPDATE OF Grade ON SC
REFERENCING
	OLDROW AS OldTuple,
	NEWROW AS NewTuple
FOR EACH ROW
WHEN(NewTuple.Grade>=1.1*OLDROW.Grade)
	INSERT INTO SC_U(Sno,Cno,OldGrade,NewGrade)
	VALUE(OldTuple.Sno,OldTuple.Cno,OldTuple.Grade,NewTuple.Grade)
	
# 5.22 将每次对表Student的插入操作所增加的学生个数记录到表Student-InsertLog中。

CREATE TRIGGER Student_Count
AFTER INSERT ON Student
REFERENCING
	NEW TABLE AS DELTA
	FOR EACH STATEMENT
	
		INSERT INTO StudentInsertLog(Numbers)
		SELECT COUNT(*) FROM DELTA
		
# 5.23 定义一个BEFORE行级触发器，为教室表Teacher定义完整性规则“教授的工资不得低于4000元，如果低于4000元，自动改为4000元”。

CREATE TRIGGER Insert_Or_Update_Sal
BEFORE INSERT OR UPDATE ON Teacher
REFERENCING NEW row AS newTuple
FOR EACH ROW
BEGIN
	IF(newtuple.Job='教授')AND(newtuple.Sal<4000)
	
		THEN newtuple.Sal:=4000;
	END IF;
END;

